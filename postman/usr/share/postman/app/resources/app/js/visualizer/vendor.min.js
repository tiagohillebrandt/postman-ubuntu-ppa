var intervalId,ipcRenderer=require("electron").ipcRenderer,MESSAGE_EVENT_BASE="visualizerMessage",isCommunicationEstablished=!1,pendingMessages={},pendingCallbacks={};function uuid(){var dt=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){var r=(dt+16*Math.random())%16|0;return dt=Math.floor(dt/16),("x"==c?r:3&r|8).toString(16)})}function clearPendingMessages(){Object.keys(pendingMessages).forEach(function(type){var messages=pendingMessages[type];Array.isArray(messages)?messages.forEach(function(message){sendMessageToParent(type,message)}):console.error("Sandbox~clearPendingMessages - pendingMessages should be an array, found "+typeof messages)}),pendingMessages={}}function handleMessageFromParent(message){switch(message.type){case"pong":isCommunicationEstablished=!0,clearPendingMessages();break;case"getData":case"getResponse":var messageId=message.data.id,err=message.data.error,value=message.data.value;pendingCallbacks[messageId]&&pendingCallbacks[messageId](err,value),delete pendingCallbacks[messageId];break;default:messageId=message.data.id,err=message.data.error&&new Error(message.data.error);pendingCallbacks[messageId]&&pendingCallbacks[messageId](err),delete pendingCallbacks[messageId]}}function sendMessageToParent(type,message){if(type){if("ping"!==type&&!isCommunicationEstablished)return pendingMessages[type]||(pendingMessages[type]=[]),void pendingMessages[type].push(message);var messageObj={type:type,data:message};ipcRenderer.sendToHost(MESSAGE_EVENT_BASE,messageObj)}}window.pm={},["getData","getResponse"].forEach(function(functionName){window.pm[functionName]=function(callback){if("function"==typeof callback){var message={id:uuid()};pendingCallbacks[message.id]=callback,sendMessageToParent(functionName,message)}}});var customConsole={};Object.keys(window.console).forEach(function(key){"function"==typeof window.console[key]&&(customConsole[key]=function(){})}),["log","info","warn","error"].forEach(function(level){customConsole[level]=function(){sendMessageToParent("console",{level:level,args:Array.from(arguments)})}}),ipcRenderer.on(MESSAGE_EVENT_BASE,function(event,message){message&&handleMessageFromParent(message)}),intervalId=setInterval(function(){isCommunicationEstablished?clearInterval(intervalId):sendMessageToParent("ping")},100);