var darwinUpdater = require('../../lib/DarwinUpdater'),
    _ = require('lodash'),
    { expect } = require('chai'),
    sinon = require('sinon');

describe('DarwinUpdater', function () {
    let DarwinUpdater,
        sandbox,
        updaterOptions = {
            autoUpdater: {
                on: _.noop
            },
            adapter: {
                getLogger: function () {
                    return {
                        error: _.noop,
                        info: _.noop,
                        warn: _.noop
                    };
                }
            }
        };

    before(function () {
        DarwinUpdater = new darwinUpdater(updaterOptions);
        sandbox = sinon.sandbox.create();
    });

    after(function () {
        sandbox.restore();
    });

    describe('getFeedUrl', function () {
        let getFeedUrlSpy;

        before(function () {
            getFeedUrlSpy = sandbox.spy(DarwinUpdater, 'getFeedUrl');
        });

        it('should return a string', () => {
            let updateInfo = {
                    platform: 'LINUX',
                    version: '6.1.0',
                    updateServerDomain: 'https://dl-beta.pstmn.io/',
                    channel: 'stable',
                    additionalParamsString: 'params'
                },
                returnVal = DarwinUpdater.getFeedUrl(updateInfo);

            expect(returnVal).to.be.a('string');
            expect(returnVal).to.equal(
                'https://dl-beta.pstmn.io/update/status?currentVersion=6.1.0&platform=linux&channel=stable&params'
            );
            expect(getFeedUrlSpy.called).to.equal(true);
            expect(getFeedUrlSpy.calledWith(updateInfo)).to.equal(true);
        });

        it('should throw error if the updateInfo is of type String', () => {
            let error = null,
                updateInfo = 'updateInfo';

            try {
                DarwinUpdater.getFeedUrl(updateInfo);
            }
            catch (e) {
                error = e;
            }
            finally {
                expect(error).to.be.instanceof(Error);
            }
        });

        it('should throw error if the updateInfo is of type Array', () => {
            let error = null,
                updateInfo = [];

            try {
                DarwinUpdater.getFeedUrl(updateInfo);
            }
            catch (e) {
                error = e;
            }
            finally {
                expect(error).to.be.instanceof(Error);
            }
        });

        it('should throw error if the updateInfo is whitespace', () => {
            let error = null,
                updateInfo = ' ';

            try {
                DarwinUpdater.getFeedUrl(updateInfo);
            }
            catch (e) {
                error = e;
            }
            finally {
                expect(error).to.be.instanceof(Error);
            }
        });

        it('should throw error if the updateInfo.platform is not of type string', () => {
            let error = null,
                updateInfo = { platform: 12 };

            try {
                DarwinUpdater.getFeedUrl(updateInfo);
            }
            catch (e) {
                error = e;
            }
            finally {
                expect(error).to.be.instanceof(Error);
            }
        });
    });
});
